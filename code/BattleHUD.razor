@using Sandbox;
@using Sandbox.UI;
@using TacticsRPG;
@inherits PanelComponent
@namespace Sandbox

<root>

</root>

@code
{
	[Property] public Unit CurrentUnit {get; set;}
	[Property] public Unit EnemyUnit {get; set;}
	[Property] public TileData CurrentTile {get; set;}

	[Property] public FocusMode? CurrentFocusMode = null;
	private UnitStatPanel _UnitStatPanel;
	private EUnitStatPanel _EUnitStatPanel;
	private MapDataPanel _MapDataPanel;
	private StatusMenuContainer _StatusMenuContainer;

	private bool FirstGameTurn = false;

	void AddListeners()
	{
		PlayerEvents.FocusModeChange += HandleFocusModeChange;
		PlayerEvents.TileHovered += HandleTileHover;
		PlayerEvents.ValidSelection += HandleValidSelection;
		BattleEvents.StateChanged += HandleBattleStateChange;
	}

	void RemoveListeners()
	{
		PlayerEvents.FocusModeChange -= HandleFocusModeChange;
		BattleEvents.StateChanged -= HandleBattleStateChange;
		PlayerEvents.ValidSelection += HandleValidSelection;
		PlayerEvents.TileHovered -= HandleTileHover;
	}

	void HandleBattleStateChange(Battlestate state)
	{
		if(state is TurnStartState && !FirstGameTurn)
		{
			_MapDataPanel = Panel.AddChild<MapDataPanel>();
			_MapDataPanel.MapName = BattleMachine.Instance.Map.Data.Name;
			_MapDataPanel.Start();
			FirstGameTurn = true;
		}
		else if(state is ExecuteActionState)
		{
			if(_UnitStatPanel.IsActive)
			{
				_UnitStatPanel.IsActive = false;
				_UnitStatPanel.BackdropActive = false;
				_UnitStatPanel._Unit = null;
			}
			if(_EUnitStatPanel.IsActive)
			{
				_EUnitStatPanel.IsActive = false;
				_EUnitStatPanel.BackdropActive = false;
				_EUnitStatPanel._Unit = null;
			}
		}
	}
	void HandleValidSelection(SelectorState state)
	{
		if(state.Selector.IsConfirming)
		{
			_UnitStatPanel.IsActive = true;
			_UnitStatPanel.BackdropActive = true;
			_UnitStatPanel._Unit = CurrentUnit;	
			SetPositionStyle();		
		}
	}
	void HandleFocusModeChange(FocusMode? mode, Unit u)
	{
		CurrentUnit = u;
		CurrentFocusMode = mode;
		Log.Info($"BattleHUD FocusMode Change: {mode.ToString() ?? "null"}" );
		if(mode == FocusMode.Menu)
		{
			if(_StatusMenuContainer.IsValid())
			{
				_StatusMenuContainer.Delete();
				_StatusMenuContainer = null;
			}
			if(_EUnitStatPanel.IsActive)
			{
				_EUnitStatPanel.IsActive = false;
				_EUnitStatPanel.BackdropActive = false;
				_EUnitStatPanel._Unit = null;
			}

			_UnitStatPanel.IsActive = true;
			_UnitStatPanel.BackdropActive = true;
			_UnitStatPanel._Unit = CurrentUnit;
			SetPositionStyle();
		}
		else if(mode == FocusMode.ConfirmMenu)
		{
			return;
		}
		else if(mode == FocusMode.StatusMenu)
		{
			if(_UnitStatPanel.IsActive)
			{
				_UnitStatPanel.IsActive = false;
				_UnitStatPanel.BackdropActive = false;
				_UnitStatPanel._Unit = null;
			}
			if(_EUnitStatPanel.IsActive)
			{
				_EUnitStatPanel.IsActive = false;
				_EUnitStatPanel.BackdropActive = false;
				_EUnitStatPanel._Unit = null;
			}
			_StatusMenuContainer = Panel.AddChild<StatusMenuContainer>();
			_StatusMenuContainer._Unit = u;
		}
		else
		{
			if(_StatusMenuContainer.IsValid())
			{
				_StatusMenuContainer.Delete();
				_StatusMenuContainer = null;
			}

			_UnitStatPanel.IsActive = false;
			_UnitStatPanel.BackdropActive = false;
			_UnitStatPanel._Unit = null;
		}
	}

	void HandleTileHover(Unit u, TileData t)
	{
		if(CurrentFocusMode == FocusMode.Menu) return;
		CurrentUnit = u;
		CurrentTile = t;
		Log.Info("BattleHUD Tile Hover Change");
		if(u != null)
		{
			_EUnitStatPanel.IsActive = true;
			_EUnitStatPanel.BackdropActive = true;
			_EUnitStatPanel._Unit = u;
		}
		else
		{
			_EUnitStatPanel.IsActive = false;
			_EUnitStatPanel.BackdropActive = false;
			_EUnitStatPanel._Unit = null;
		}
	}
	void SetPositionStyle()
	{
		_UnitStatPanel.Style.Position = PositionMode.Absolute;
		_UnitStatPanel.Style.Left = Length.Pixels(100);
		_UnitStatPanel.Style.Bottom = Length.Pixels(100);
	}
	protected override void OnAwake()
	{
		AddListeners();
	}
	protected override void OnDestroy()
	{
		RemoveListeners();
	}
	protected override void OnStart()
	{

		_UnitStatPanel = Panel.AddChild<UnitStatPanel>();
		_UnitStatPanel._Unit = CurrentUnit;

		_EUnitStatPanel = Panel.AddChild<EUnitStatPanel>();
	}
/*
	position: absolute;

	left: 100px;
	bottom: 100px;

*/
	protected override int BuildHash() => System.HashCode.Combine(RealTime.Now);
}

