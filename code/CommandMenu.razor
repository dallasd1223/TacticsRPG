@using System;
@using Sandbox;
@using Sandbox.UI;
@using TacticsRPG;
@inherits PanelComponent
@namespace Sandbox

<root>
	@if(!Initialized) return;
	@if((BattleManager.Instance.CurrentBattleState == BattleState.WaitForCommands) && (PlayerMaster.Instance.Mode == FocusMode.Menu))
	{
		
		<img class="pointer" @ref="ImgPanel" src="ui/triangle.png" />
		

		<div class="menu" @ref="Menu">

			@foreach(CommandItem com in BattleManager.Instance.ActiveUnit.Turn.CommandItems)
			{
				if(com.Active)
				{
					<div class="button" style ="@( BattleManager.Instance.ActiveUnit.Turn.CommandItems.IndexOf(com) == SelectedIndex ? "background-color: green" : "background-color: blue")">
						<h1 class="button-text">@com.Text</h1>
					</div>
				}
				else if(!com.Active)
				{
					<div class="button" style ="background-color: gray">
						<h1 class="button-text">@com.Text</h1>
					</div>					
				}

			}
		</div>
		
		<AbilityMenu @ref="AMenu" />

		<ItemMenu @ref="IMenu" />
	}



</root>

@code
{
	[Property] public bool Initialized {get; set;} = false;
	[Property] public List<string> Commands {get; set;}
	[Property] public int SelectedIndex {get; set;} = 0;
	[Property] SoundEvent SelectSound {get; set;}
	[Property] SoundEvent PressSound {get; set;}
	private Panel Menu {get; set;}
	private Image ImgPanel {get; set;}
	private AbilityMenu AMenu {get; set;}
	private ItemMenu IMenu {get; set;}

	protected override void OnAwake()
	{
		SetCommandList();
	}

	protected override void OnUpdate()
	{
		if(!Initialized) return;
		if(!Menu.IsVisible || !ImgPanel.IsVisible) return;
		var MenuPos = Menu.Box.Rect.Position / Panel.ScaleToScreen;

		ImgPanel.Style.Top = MenuPos.y + (34 * SelectedIndex);
		ImgPanel.Style.Left = MenuPos.x -20 ;

	}
	public void IncreaseIndex()
	{
		if(SelectedIndex == Commands.Count() - 1)
		{
			Log.Info("Out Of Range");
			return;
		}
		SelectedIndex += 1;
		Sound.Play(SelectSound);
		StateHasChanged();
		Log.Info($"CommandMenu Index Set To {SelectedIndex}");
	}

	public void DecreaseIndex()
	{
		if(SelectedIndex == 0)
		{
			Log.Info("Out Of Range");
			return;
		}		
		SelectedIndex -= 1;
		Sound.Play(SelectSound);
		StateHasChanged();
		Log.Info($"CommandMenu Index Set To {SelectedIndex}");
	}

	public void SelectCommand()
	{
		Log.Info($"Selecting {Commands[SelectedIndex]} Command");
		Sound.Play(PressSound);
		PlayerMaster.Instance.SelectedCommand(GetCommandFromString(Commands[SelectedIndex]));

	}

	public void SetCommandList()
	{
		Log.Info("Setting Command List");
		var arr = Enum.GetValues(typeof(CommandType));
		foreach(CommandType command in arr)
		{
			Commands.Add(GetStringFromCommand(command));
		}
	}

	public string GetStringFromCommand(CommandType command)
	{
		switch(command)
		{
			case CommandType.Move:
				return "MOVE";
			case CommandType.Attack:
				return "ATTACK";
			case CommandType.Ability:
				return "ABILITY";
			case CommandType.Wait:
				return "WAIT";
		}
		return "";
	}

	public CommandType? GetCommandFromString(String str)
	{
		switch(str)
		{
			case "MOVE":
				return CommandType.Move;
			case "ATTACK":
				return CommandType.Attack;
			case "ABILITY":
				return CommandType.Ability;
			case "WAIT":
				return CommandType.Wait;
		}
		Log.Info($"Error: No Matching Command For {str}");
		return null;
	}

	/// <summary>
	/// the hash determines if the system should be rebuilt. If it changes, it will be rebuilt
	/// </summary>
	protected override int BuildHash() => System.HashCode.Combine(RealTime.Now);
}
