@using System;
@using Sandbox;
@using Sandbox.UI;
@using TacticsRPG;
@inherits Panel
@namespace Sandbox

<root>
	@if(!IsActive) return;
		<div class="@(IsGrey ? "menu grey-out" : "menu")" @ref="Menu">

			@foreach(CommandItem com in BattleManager.Instance.ActiveUnit.Turn.CommandItems)
			{
				if(IsGrey || !com.Active)
				{
					<div class="button" style ="background-color: gray">
						<h1 class="button-text">@com.Text</h1>
					</div>	
								
				}
				else if(com.Active)
				{
					<div class="button" style ="@( BattleManager.Instance.ActiveUnit.Turn.CommandItems.IndexOf(com) == SelectedIndex ? "background-color: green" : "background-color: blue")">
						<h1 class="button-text">@com.Text</h1>
					</div>
				}

			}
		</div>
</root>

@code
{
	[Property] public bool IsActive {get; set;} = true;
	[Property] public bool IsGrey {get; set;} = false;
	public int MenuDepth = 0;
	[Property] public int SelectedIndex {get; set;} = 0;
	[Property] SoundEvent SelectSound {get; set;}
	[Property] SoundEvent PressSound {get; set;}
	public Panel Menu;

	protected override void OnAfterTreeRender(bool firstTime)
	{
		if(!firstTime) return;
	}

	public void Activate()
	{
		IsActive = true;
	}

	public void Deactivate()
	{
		IsActive = false;
	}

	public void SetTransform(int Level)
	{
		var transform = new PanelTransform();
		transform.AddTranslateX(Length.Pixels(-130*Level));
		Menu.Style.Transform = transform;
	}

	public void IncreaseIndex()
	{
		if(SelectedIndex == BattleManager.Instance.ActiveUnit.Turn.CommandItems.Count() - 1)
		{
			Log.Info("Out Of Range");
			return;
		}
		SelectedIndex += 1;
		Sound.Play(SelectSound);
		StateHasChanged();
		Log.Info($"CommandMenu Index Set To {SelectedIndex}");
	}

	public void DecreaseIndex()
	{
		if(SelectedIndex == 0)
		{
			Log.Info("Out Of Range");
			return;
		}		
		SelectedIndex -= 1;
		Sound.Play(SelectSound);
		StateHasChanged();
		Log.Info($"CommandMenu Index Set To {SelectedIndex}");
	}

	public void SelectCommand()
	{
		Log.Info($"Selecting {BattleManager.Instance.ActiveUnit.Turn.CommandItems[SelectedIndex].Text} Command");
		Sound.Play(PressSound);
		PlayerMaster.Instance.SelectedCommand(GetCommandFromString(BattleManager.Instance.ActiveUnit.Turn.CommandItems[SelectedIndex].Text));

	}

	public string GetStringFromCommand(CommandType command)
	{
		switch(command)
		{
			case CommandType.Move:
				return "MOVE";
			case CommandType.Attack:
				return "ATTACK";
			case CommandType.Ability:
				return "ABILITY";
			case CommandType.Wait:
				return "WAIT";
		}
		return "";
	}

	public CommandType? GetCommandFromString(String str)
	{
		switch(str)
		{
			case "MOVE":
				return CommandType.Move;
			case "ATTACK":
				return CommandType.Attack;
			case "ABILITY":
				return CommandType.Ability;
			case "WAIT":
				return CommandType.Wait;
		}
		Log.Info($"Error: No Matching Command For {str}");
		return null;
	}

	/// <summary>
	/// the hash determines if the system should be rebuilt. If it changes, it will be rebuilt
	/// </summary>
	protected override int BuildHash() => System.HashCode.Combine(RealTime.Now);
}
