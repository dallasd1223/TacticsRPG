@using Sandbox;
@using Sandbox.UI;
@using TacticsRPG;
@inherits PanelComponent
@namespace Sandbox

<root>
	@if(!IsActive)return;
	{
		<img class="pointer" @ref="ImgPanel" src="ui/triangle.png" />
		<CommandMenu @ref="CMenu" />
		<AbilityMenu @ref="AMenu" />
		<ItemMenu @ref="IMenu" />
		<SpellMenu @ref="SpMenu" />
		<SkillMenu @ref="SkMenu" />
	}

</root>

@code
{
	//CONDENSE ALL ABILITYITEM MENUS TO ONE MENU!!! (SKILL, SPELL, ITEM)
	//Refactor Asap
	
	[Property] public bool IsActive {get; set;} = false;
	[Property] Unit ActiveUnit {get; set;} = null;
	[Property] public MenuState? State {get; set;} = MenuState.Action;
	[Property] public MenuState? LastState {get; set;} = null;
	[Property] public int MenuLevel {get; set;} = 0;
	[Property] public int YValue {get; set;} = 470;
	public CommandMenu CMenu {get; set;}
	public AbilityMenu AMenu {get; set;}
	public ItemMenu IMenu {get; set;}
	public SpellMenu SpMenu {get; set;}
	public SkillMenu SkMenu {get; set;}
	[Property] SoundEvent SelectSound {get; set;}
	[Property] SoundEvent PressSound {get; set;}
	[Property] SoundEvent BackSound {get; set;}

	public bool HasInjected = false;
	public float InjectBufer = 0.05f;
	public TimeSince SinceActivated;

	public event Action<CommandType?, CommandItem> ActionSelected;

	private Image ImgPanel;

	protected override void OnAwake()
	{
		PlayerEvents.FocusModeChange -= HandlePlayerFocusMode;	
		PlayerEvents.FocusModeChange += HandlePlayerFocusMode;

	}

	protected override void OnDestroy()
	{
		Log.Info("Action Menu Destroyed");
		PlayerEvents.FocusModeChange -= HandlePlayerFocusMode;	
	}
	
	public void HandlePlayerFocusMode(FocusMode? mode, Unit u)
	{
		Log.Info("Handling Focus Event");
		switch(mode)
		{
			case FocusMode.Menu:
				ActivateMenu(u);
				break;
			default:
				DeactivateMenu();
				break;
		}
	}
	public void ActivateMenu(Unit u)
	{
		Log.Info($"Menu {u}");
		IsActive = true;
		ActiveUnit = u;
		SinceActivated = 0f;

	}

	//Hacky Solution
	public void InjectUnit()
	{
		if(!IsActive) return;
		CMenu.ActiveUnit = ActiveUnit;
		AMenu.ActiveUnit = ActiveUnit;
		IMenu.ActiveUnit = ActiveUnit;
		SpMenu.ActiveUnit = ActiveUnit;
		SkMenu.ActiveUnit = ActiveUnit;	

		HasInjected = true;
	}

	public void InjectRoot()
	{
		CMenu.RootMenu = this;
		AMenu.RootMenu = this;
		IMenu.RootMenu = this;
		SpMenu.RootMenu = this;
		SkMenu.RootMenu = this;
	}


	public void DeactivateMenu()
	{
		IsActive = false;
		HasInjected = false;
	}

	protected override void OnUpdate()
	{
		if(!IsActive) return;
		if(!HasInjected && SinceActivated >= InjectBufer)
		{
			InjectRoot();
			InjectUnit();
		}
		if(!HasInjected) return;
		switch(State)
		{

			case MenuState.Action:
				if(!CMenu.IsValid()) return;
				if(!CMenu.IsActive) return;
				if(!CMenu.ActiveUnit.IsValid()) return;
				if(CMenu.Menu is null) return;
				if(!CMenu.Menu.IsVisible) return;
				CMenu.Menu.Style.Top = Length.Pixels(YValue);
				var CMenuPos = CMenu.Menu.Box.Rect.Position / Panel.ScaleToScreen;
				ImgPanel.Style.Top = CMenuPos.y + (34 * CMenu.SelectedIndex);
				ImgPanel.Style.Left = CMenuPos.x -20 ;
				break;
			case MenuState.Ability:
				if(!AMenu.IsValid()) return;
				if(!AMenu.IsActive) return;
				AMenu.Menu.Style.Top = Length.Pixels(YValue);
				var AMenuPos = AMenu.Menu.Box.Rect.Position / Panel.ScaleToScreen;
				ImgPanel.Style.Top = AMenuPos.y + (34 * AMenu.SelectedIndex);
				ImgPanel.Style.Left = AMenuPos.x -20 ;
				break;
			case MenuState.Item:
				if(!IMenu.IsValid()) return;
				if(!IMenu.IsActive) return;
				IMenu.Menu.Style.Top = Length.Pixels(YValue);
				var IMenuPos = IMenu.Menu.Box.Rect.Position / Panel.ScaleToScreen;
				ImgPanel.Style.Top = IMenuPos.y + (34 * IMenu.SelectedIndex);
				ImgPanel.Style.Left = IMenuPos.x -20 ;
				break;
			case MenuState.Magic:
			Log.Info("Magic Why");
				if(!SpMenu.IsValid()) return;
				if(!SpMenu.IsActive) return;
				SpMenu.Menu.Style.Top = Length.Pixels(YValue);
				var SpMenuPos = SpMenu.Menu.Box.Rect.Position / Panel.ScaleToScreen;
				ImgPanel.Style.Top = SpMenuPos.y + (34 * SpMenu.SelectedIndex);
				ImgPanel.Style.Left = SpMenuPos.x -20 ;
				break;
			case MenuState.Skill:
				if(!SkMenu.IsValid()) return;
				if(!SkMenu.IsActive) return;
				SkMenu.Menu.Style.Top = Length.Pixels(YValue);
				var SkMenuPos = SkMenu.Menu.Box.Rect.Position / Panel.ScaleToScreen;
				ImgPanel.Style.Top = SkMenuPos.y + (34 * SkMenu.SelectedIndex);
				ImgPanel.Style.Left = SkMenuPos.x -20 ;
				break;	
		}

	}

	public void DoReset()
	{
		State = MenuState.Action;
		LastState = null;
		MenuLevel = 0;
	}

	public void AbilityMenuSelect(string text)
	{
		switch(text)
		{
			case "Item":
				ChangeMenuState(MenuState.Item);
				break;
			case "Magic":
				ChangeMenuState(MenuState.Magic);
				break;
			case "Skill":
				ChangeMenuState(MenuState.Skill);
				break;
		}
	}

	public void ChangeMenuState(MenuState? state)
	{
		switch(state)
		{
			case MenuState.Action:
				break;
			case MenuState.Ability:
				if(State == MenuState.Action)
				{

					LastState = State;
					State = state;
					NextMenuState();
					CMenu.IsGrey = true;
					CMenu.SetTransform(MenuLevel);
					AMenu.Activate();			
				}
				break;
			case MenuState.Item:
				if(State == MenuState.Ability)
				{
					LastState = State;
					State = state;
					NextMenuState();
					AMenu.IsGrey = true;
					AMenu.SetTransform(MenuLevel);
					CMenu.SetTransform(MenuLevel);
					IMenu.Activate();
				}
				break;
			case MenuState.Magic:
				if(State == MenuState.Ability)
				{
					LastState = State;
					State = state;
					NextMenuState();
					AMenu.IsGrey = true;
					AMenu.SetTransform(MenuLevel);
					CMenu.SetTransform(MenuLevel);
					SpMenu.Activate();
				}
				break;
			case MenuState.Skill:
				if(State == MenuState.Ability)
				{
					LastState = State;
					State = state;
					NextMenuState();
					AMenu.IsGrey = true;
					AMenu.SetTransform(MenuLevel);
					CMenu.SetTransform(MenuLevel);
					SkMenu.Activate();
				}
				break;
		}
	}

	public void LastMenuState()
	{
		switch(State)
		{
			case MenuState.Ability:
				State = MenuState.Action;
				Log.Info(State);
				AMenu.Deactivate();
				BackMenuState();
				CMenu.IsGrey = false;
				CMenu.SetTransform(0);
				Sound.Play(BackSound);
				break;
			case MenuState.Item:
				State = MenuState.Ability;
				Log.Info(State);
				IMenu.Deactivate();
				BackMenuState();
				AMenu.IsGrey = false;
				AMenu.ZeroTransform();
				CMenu.SetTransform(MenuLevel);
				Sound.Play(BackSound);
				break;
			case MenuState.Magic:
				State = MenuState.Ability;
				Log.Info(State);
				SpMenu.Deactivate();
				BackMenuState();
				AMenu.IsGrey = false;
				AMenu.ZeroTransform();
				CMenu.SetTransform(MenuLevel);
				Sound.Play(BackSound);
				break;
			case MenuState.Skill:
				State = MenuState.Ability;
				Log.Info(State);
				SkMenu.Deactivate();
				BackMenuState();
				AMenu.IsGrey = false;
				AMenu.ZeroTransform();
				CMenu.SetTransform(MenuLevel);
				Sound.Play(BackSound);
				break;
		}
	}
	public void NextMenuState()
	{
		MenuLevel++;
	}

	public void BackMenuState()
	{
		MenuLevel--;
	}

	public void IncreaseIndex()
	{
		switch(State)
		{
			case MenuState.Action:
				CMenu.IncreaseIndex();
				Sound.Play(SelectSound);
				break;
			case MenuState.Ability:
				AMenu.IncreaseIndex();
				Sound.Play(SelectSound);
				break;
			case MenuState.Item:
				IMenu.IncreaseIndex();
				Sound.Play(SelectSound);
				break;
			case MenuState.Magic:
				SpMenu.IncreaseIndex();
				Sound.Play(SelectSound);
				break;
			case MenuState.Skill:
				SkMenu.IncreaseIndex();
				Sound.Play(SelectSound);
				break;
		}
	}

	public void DecreaseIndex()
	{
		switch(State)
		{
			case MenuState.Action:
				CMenu.DecreaseIndex();
				Sound.Play(SelectSound);
				break;
			case MenuState.Ability:
				AMenu.DecreaseIndex();
				Sound.Play(SelectSound);
				break;
			case MenuState.Item:
				IMenu.DecreaseIndex();
				Sound.Play(SelectSound);
				break;
			case MenuState.Magic:
				SpMenu.DecreaseIndex();
				Sound.Play(SelectSound);
				break;
			case MenuState.Skill:
				SkMenu.DecreaseIndex();
				Sound.Play(SelectSound);
				break;
		}
	}

	public void SelectItem()
	{
		switch(State)
		{
			case MenuState.Action:
				CMenu.SelectCommand();
				ActionSelected?.Invoke(CMenu.GetCommandFromString(ActiveUnit.Turn.CommandItems[CMenu.SelectedIndex].Text), ActiveUnit.Turn.CommandItems[CMenu.SelectedIndex]);
				Sound.Play(PressSound);
				break;
			case MenuState.Ability:
				AMenu.SelectMenuItem();
				ActionSelected?.Invoke(CommandType.Ability, ActiveUnit.Turn.AbilityCommands[AMenu.SelectedIndex]);
				Sound.Play(PressSound);
				break;
			case MenuState.Item:
				IMenu.SelectMenuItem();
				ActionSelected?.Invoke(CommandType.Item, ActiveUnit.Turn.ItemCommands[IMenu.SelectedIndex]);
				Sound.Play(PressSound);
				break;
			case MenuState.Magic:
				SpMenu.SelectMenuItem();
				ActionSelected?.Invoke(CommandType.Magic, ActiveUnit.Turn.SpellCommands[SpMenu.SelectedIndex]);
				Sound.Play(PressSound);
				break;
			case MenuState.Skill:
				SkMenu.SelectMenuItem();
				ActionSelected?.Invoke(CommandType.Skill, ActiveUnit.Turn.SkillCommands[SkMenu.SelectedIndex]);
				Sound.Play(PressSound);
				break;
		}
	}


	
	protected override int BuildHash() => System.HashCode.Combine(RealTime.Now);
}
