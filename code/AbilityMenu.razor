@using Sandbox;
@using Sandbox.UI;
@using TacticsRPG;
@inherits Panel
@namespace Sandbox

<root>
	@if(!IsActive) return;
		<div class="ability-menu" @ref="Menu">

			@foreach(CommandItem ability in BattleManager.Instance.ActiveUnit.Turn.AbilityCommands)
			{
				if(IsGrey)
				{
					<div class="button" style ="background-color: gray">
						<h1 class="button-text">@ability.Text</h1>
					</div>						
				}
				else if(ability.Active)
				{
					<div class="button" style ="@( BattleManager.Instance.ActiveUnit.Turn.AbilityCommands.IndexOf(ability) == SelectedIndex ? "background-color: green" : "background-color: blue")">
						<h1 class="button-text">@ability.Text</h1>
					</div>
				}
				else if(!ability.Active)
				{
					<div class="button" style ="background-color: gray">
						<h1 class="button-text">@ability.Text</h1>
					</div>					
				}

			}
		</div>
</root>

@code
{
	public bool IsActive = false;
	public bool IsGrey = false;
	public int MenuDepth = 1;
	public Panel Menu;
	[Property] public int SelectedIndex {get; set;} = 0;

	public void Activate()
	{
		IsActive = true;
	}

	public void Deactivate()
	{
		IsActive = false;
	}

	public void IncreaseIndex()
	{
		if(SelectedIndex == BattleManager.Instance.ActiveUnit.Turn.AbilityCommands.Count() - 1)
		{
			Log.Info("Out Of Range");
			return;
		}
		SelectedIndex += 1;

		StateHasChanged();
		Log.Info($"AbilityMenu Index Set To {SelectedIndex}");
	}

	public void DecreaseIndex()
	{
		if(SelectedIndex == 0)
		{
			Log.Info("Out Of Range");
			return;
		}		
		SelectedIndex -= 1;
		StateHasChanged();
		Log.Info($"AbilityMenu Index Set To {SelectedIndex}");
	}
	public void SetTransform(int Level)
	{
		var transform = new PanelTransform();
		transform.AddTranslateX(Length.Pixels(-130*(Level - 1)));
		Menu.Style.Transform = transform;
	}

	public void ZeroTransform()
	{
		var transform = new PanelTransform();
		transform.AddTranslateX(Length.Pixels(0));
		Menu.Style.Transform = transform;		
	}

	public void SelectMenuItem()
	{
		PlayerMaster.Instance.AbilityMenuSelect(BattleManager.Instance.ActiveUnit.Turn.AbilityCommands[SelectedIndex].Text);
		Log.Info($"{BattleManager.Instance.ActiveUnit.Turn.AbilityCommands[SelectedIndex].Text}");
	}

	public void LogTest()
	{
		Log.Info("Testing Ability Menu Log");
	}
	/// <summary>
	/// the hash determines if the system should be rebuilt. If it changes, it will be rebuilt
	/// </summary>
	protected override int BuildHash() => System.HashCode.Combine(RealTime.Now);
}
